
PdM_TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002630  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080027dc  080027dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027fc  080027fc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080027fc  080027fc  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002804  08002804  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002804  08002804  00012804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800280c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000074  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e16  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b9f  00000000  00000000  00029e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  0002ba08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000758  00000000  00000000  0002c238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271d7  00000000  00000000  0002c990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e9c5  00000000  00000000  00053b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee3f0  00000000  00000000  0006252c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015091c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e50  00000000  00000000  0015096c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080027c4 	.word	0x080027c4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	080027c4 	.word	0x080027c4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <debounceFSM_init>:
// P4_2 - Variable de estado (global)
static debounceState_t curr_state;

static bool_t pending_pressed;

void debounceFSM_init(void){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	curr_state = BUTTON_UP;
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <debounceFSM_init+0x28>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
	BSP_LED_Off(LED1);
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 f9bc 	bl	8000878 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 8000500:	2002      	movs	r0, #2
 8000502:	f000 f9b9 	bl	8000878 <BSP_LED_Off>
	delayInit(&bounce_delay, TIME_DEBOUNCE);
 8000506:	2128      	movs	r1, #40	; 0x28
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <debounceFSM_init+0x2c>)
 800050a:	f000 f8fd 	bl	8000708 <delayInit>
	pending_pressed = false;
 800050e:	4b04      	ldr	r3, [pc, #16]	; (8000520 <debounceFSM_init+0x30>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000044 	.word	0x20000044
 800051c:	20000038 	.word	0x20000038
 8000520:	20000045 	.word	0x20000045

08000524 <debounceFSM_update>:


void debounceFSM_update(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	switch (curr_state) {
 8000528:	4b30      	ldr	r3, [pc, #192]	; (80005ec <debounceFSM_update+0xc8>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b03      	cmp	r3, #3
 800052e:	d851      	bhi.n	80005d4 <debounceFSM_update+0xb0>
 8000530:	a201      	add	r2, pc, #4	; (adr r2, 8000538 <debounceFSM_update+0x14>)
 8000532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000536:	bf00      	nop
 8000538:	08000549 	.word	0x08000549
 800053c:	08000563 	.word	0x08000563
 8000540:	0800058f 	.word	0x0800058f
 8000544:	080005a9 	.word	0x080005a9
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER) == BOT_OFF) {
 8000548:	2000      	movs	r0, #0
 800054a:	f000 fa1f 	bl	800098c <BSP_PB_GetState>
 800054e:	4603      	mov	r3, r0
 8000550:	2b01      	cmp	r3, #1
 8000552:	d142      	bne.n	80005da <debounceFSM_update+0xb6>
			delayReadState(&bounce_delay);
 8000554:	4826      	ldr	r0, [pc, #152]	; (80005f0 <debounceFSM_update+0xcc>)
 8000556:	f000 f8f5 	bl	8000744 <delayReadState>
			curr_state = BUTTON_FALLING;
 800055a:	4b24      	ldr	r3, [pc, #144]	; (80005ec <debounceFSM_update+0xc8>)
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000560:	e03b      	b.n	80005da <debounceFSM_update+0xb6>

	case BUTTON_FALLING:
		if (delayReadState(&bounce_delay)) {
 8000562:	4823      	ldr	r0, [pc, #140]	; (80005f0 <debounceFSM_update+0xcc>)
 8000564:	f000 f8ee 	bl	8000744 <delayReadState>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d037      	beq.n	80005de <debounceFSM_update+0xba>
			if (BSP_PB_GetState(BUTTON_USER) == BOT_OFF) {
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fa0c 	bl	800098c <BSP_PB_GetState>
 8000574:	4603      	mov	r3, r0
 8000576:	2b01      	cmp	r3, #1
 8000578:	d105      	bne.n	8000586 <debounceFSM_update+0x62>
				curr_state = BUTTON_DOWN;
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <debounceFSM_update+0xc8>)
 800057c:	2202      	movs	r2, #2
 800057e:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 8000580:	f000 f838 	bl	80005f4 <buttonPressed>
			} else {
				curr_state = BUTTON_UP;
			}
		}
		break;
 8000584:	e02b      	b.n	80005de <debounceFSM_update+0xba>
				curr_state = BUTTON_UP;
 8000586:	4b19      	ldr	r3, [pc, #100]	; (80005ec <debounceFSM_update+0xc8>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
		break;
 800058c:	e027      	b.n	80005de <debounceFSM_update+0xba>

	case BUTTON_DOWN:
		if (BSP_PB_GetState(BUTTON_USER) == BOT_ON) {
 800058e:	2000      	movs	r0, #0
 8000590:	f000 f9fc 	bl	800098c <BSP_PB_GetState>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d123      	bne.n	80005e2 <debounceFSM_update+0xbe>
			delayReadState(&bounce_delay);
 800059a:	4815      	ldr	r0, [pc, #84]	; (80005f0 <debounceFSM_update+0xcc>)
 800059c:	f000 f8d2 	bl	8000744 <delayReadState>
			curr_state = BUTTON_RAISING;
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <debounceFSM_update+0xc8>)
 80005a2:	2203      	movs	r2, #3
 80005a4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005a6:	e01c      	b.n	80005e2 <debounceFSM_update+0xbe>

	case BUTTON_RAISING:
		if (delayReadState(&bounce_delay)) {
 80005a8:	4811      	ldr	r0, [pc, #68]	; (80005f0 <debounceFSM_update+0xcc>)
 80005aa:	f000 f8cb 	bl	8000744 <delayReadState>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d018      	beq.n	80005e6 <debounceFSM_update+0xc2>
			if (BSP_PB_GetState(BUTTON_USER) == BOT_ON) {
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 f9e9 	bl	800098c <BSP_PB_GetState>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d105      	bne.n	80005cc <debounceFSM_update+0xa8>
				curr_state = BUTTON_UP;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <debounceFSM_update+0xc8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 80005c6:	f000 f821 	bl	800060c <buttonReleased>
			} else {
				curr_state = BUTTON_DOWN;
			}
		}
		break;
 80005ca:	e00c      	b.n	80005e6 <debounceFSM_update+0xc2>
				curr_state = BUTTON_DOWN;
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <debounceFSM_update+0xc8>)
 80005ce:	2202      	movs	r2, #2
 80005d0:	701a      	strb	r2, [r3, #0]
		break;
 80005d2:	e008      	b.n	80005e6 <debounceFSM_update+0xc2>
	default:
		//Si algo modificó la variable estadoActual
		// a un estado no válido llevo la MEF a un
		// lugar seguro, por ejemplo, la reinicio:
		//controlDeErrores();
		debounceFSM_init();
 80005d4:	f7ff ff8c 	bl	80004f0 <debounceFSM_init>
		break;
 80005d8:	e006      	b.n	80005e8 <debounceFSM_update+0xc4>
		break;
 80005da:	bf00      	nop
 80005dc:	e004      	b.n	80005e8 <debounceFSM_update+0xc4>
		break;
 80005de:	bf00      	nop
 80005e0:	e002      	b.n	80005e8 <debounceFSM_update+0xc4>
		break;
 80005e2:	bf00      	nop
 80005e4:	e000      	b.n	80005e8 <debounceFSM_update+0xc4>
		break;
 80005e6:	bf00      	nop
	}
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000044 	.word	0x20000044
 80005f0:	20000038 	.word	0x20000038

080005f4 <buttonPressed>:


static void buttonPressed(void){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	BSP_LED_Toggle(LED1);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 f957 	bl	80008ac <BSP_LED_Toggle>
	pending_pressed = true;
 80005fe:	4b02      	ldr	r3, [pc, #8]	; (8000608 <buttonPressed+0x14>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000045 	.word	0x20000045

0800060c <buttonReleased>:


static void buttonReleased(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	BSP_LED_Toggle(LED3);
 8000610:	2002      	movs	r0, #2
 8000612:	f000 f94b 	bl	80008ac <BSP_LED_Toggle>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <readKey>:

bool readKey(void){
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
	bool_t pending_aux;

	pending_aux = pending_pressed;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <readKey+0x20>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	71fb      	strb	r3, [r7, #7]
	pending_pressed = false;
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <readKey+0x20>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]

	return pending_aux;
 800062e:	79fb      	ldrb	r3, [r7, #7]
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	20000045 	.word	0x20000045

08000640 <uartInit>:
#define MAX_Size_String_UART 100 //Solo se enviara como maximo MAX_Size_String_UART caracteres

/* UART handler declaration */
UART_HandleTypeDef UartHandle;

bool uartInit(){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
						  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
		  - Stop Bit    = One Stop bit
		  - Parity      = ODD parity
		  - BaudRate    = 9600 baud
		  - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <uartInit+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <uartInit+0x54>)
 8000648:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = BaudVel;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <uartInit+0x50>)
 800064c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000650:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <uartInit+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <uartInit+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <uartInit+0x50>)
 8000660:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000664:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <uartInit+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <uartInit+0x50>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <uartInit+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <uartInit+0x50>)
 800067a:	f001 fab9 	bl	8001bf0 <HAL_UART_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <uartInit+0x48>
	  {
		return false;
 8000684:	2300      	movs	r3, #0
 8000686:	e000      	b.n	800068a <uartInit+0x4a>
	  }
	  return true;
 8000688:	2301      	movs	r3, #1
}
 800068a:	4618      	mov	r0, r3
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000048 	.word	0x20000048
 8000694:	40004800 	.word	0x40004800

08000698 <uartSendString>:



void uartSendString(uint8_t * pstring){
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

	uint8_t * aux_string = pstring;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	60fb      	str	r3, [r7, #12]
	uint8_t size_string = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	72fb      	strb	r3, [r7, #11]
	while(*aux_string != 0){
 80006a8:	e008      	b.n	80006bc <uartSendString+0x24>
		size_string++;
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	3301      	adds	r3, #1
 80006ae:	72fb      	strb	r3, [r7, #11]
		aux_string++;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60fb      	str	r3, [r7, #12]
		if (size_string>=MAX_Size_String_UART) {
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	2b63      	cmp	r3, #99	; 0x63
 80006ba:	d804      	bhi.n	80006c6 <uartSendString+0x2e>
	while(*aux_string != 0){
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1f2      	bne.n	80006aa <uartSendString+0x12>
 80006c4:	e000      	b.n	80006c8 <uartSendString+0x30>
			break;
 80006c6:	bf00      	nop
		}
	}
	HAL_UART_Transmit(&UartHandle, pstring , size_string, Timeout_UART);
 80006c8:	7afb      	ldrb	r3, [r7, #11]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <uartSendString+0x48>)
 80006d4:	f001 fad9 	bl	8001c8a <HAL_UART_Transmit>
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000048 	.word	0x20000048

080006e4 <uartReceiveStringSize>:

void uartSendStringSize(uint8_t * pstring, uint16_t size){
	HAL_UART_Transmit(&UartHandle, pstring , size, Timeout_UART);
}

void uartReceiveStringSize(uint8_t * pstring, uint16_t size){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&UartHandle, pstring, 12);//, 1000);
 80006f0:	220c      	movs	r2, #12
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <uartReceiveStringSize+0x20>)
 80006f6:	f001 fb5a 	bl	8001dae <HAL_UART_Receive_IT>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000048 	.word	0x20000048

08000708 <delayInit>:
#define MAX_duration 3600000 //1 hora


/*delayInit debe cargar el valor de duración del retardo en la estructura, en el campo correspondiente.
 No debe iniciar el conteo del retardo. Debe inicializar el flag running en `false´.*/
void delayInit( delay_t * delay, tick_t duration ){
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	if (delay!=0 && duration<MAX_duration && duration>0) {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00d      	beq.n	8000734 <delayInit+0x2c>
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	4a09      	ldr	r2, [pc, #36]	; (8000740 <delayInit+0x38>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d209      	bcs.n	8000734 <delayInit+0x2c>
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d006      	beq.n	8000734 <delayInit+0x2c>
		delay->duration = duration;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	605a      	str	r2, [r3, #4]
		delay->running = 0;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	721a      	strb	r2, [r3, #8]
	}else{
		while(1);
	}

}
 8000732:	e000      	b.n	8000736 <delayInit+0x2e>
		while(1);
 8000734:	e7fe      	b.n	8000734 <delayInit+0x2c>
}
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	0036ee80 	.word	0x0036ee80

08000744 <delayReadState>:


/*La siguiente funcion debe verificar el estado del flag running. si es false, debe tomar marca de tiempo y cambiar
 running a ‘true’. Si es true, debe hacer la cuenta para saber si el tiempo del retardo se cumplió o no y devolver
 'true' o 'false' respectivamente. */
bool_t delayReadState( delay_t * delay ){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	if (delay!=0){
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d023      	beq.n	800079a <delayReadState+0x56>
		if (!delay->running){
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7a1b      	ldrb	r3, [r3, #8]
 8000756:	f083 0301 	eor.w	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d00a      	beq.n	8000776 <delayReadState+0x32>
			delay->startTime=HAL_GetTick();
 8000760:	f000 f9ee 	bl	8000b40 <HAL_GetTick>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	601a      	str	r2, [r3, #0]
			delay->running=1;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2201      	movs	r2, #1
 8000770:	721a      	strb	r2, [r3, #8]
				return true;
			}else{
				return false;
			}
		}
		return false;
 8000772:	2300      	movs	r3, #0
 8000774:	e012      	b.n	800079c <delayReadState+0x58>
			if(HAL_GetTick()-delay->startTime >= delay->duration){
 8000776:	f000 f9e3 	bl	8000b40 <HAL_GetTick>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	1ad2      	subs	r2, r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	d304      	bcc.n	8000796 <delayReadState+0x52>
				delay->running=0;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	721a      	strb	r2, [r3, #8]
				return true;
 8000792:	2301      	movs	r3, #1
 8000794:	e002      	b.n	800079c <delayReadState+0x58>
				return false;
 8000796:	2300      	movs	r3, #0
 8000798:	e000      	b.n	800079c <delayReadState+0x58>
	}else{
		while(1);
 800079a:	e7fe      	b.n	800079a <delayReadState+0x56>
	}
	return false;
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d10e      	bne.n	80007d2 <BSP_LED_Init+0x2e>
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <BSP_LED_Init+0x94>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <BSP_LED_Init+0x94>)
 80007be:	f043 0302 	orr.w	r3, r3, #2
 80007c2:	6313      	str	r3, [r2, #48]	; 0x30
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <BSP_LED_Init+0x94>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c8:	f003 0302 	and.w	r3, r3, #2
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	e00d      	b.n	80007ee <BSP_LED_Init+0x4a>
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <BSP_LED_Init+0x94>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <BSP_LED_Init+0x94>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <BSP_LED_Init+0x94>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4a12      	ldr	r2, [pc, #72]	; (800083c <BSP_LED_Init+0x98>)
 80007f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <BSP_LED_Init+0x9c>)
 8000808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080c:	f107 0214 	add.w	r2, r7, #20
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fab2 	bl	8000d7c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4a09      	ldr	r2, [pc, #36]	; (8000840 <BSP_LED_Init+0x9c>)
 800081c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4a06      	ldr	r2, [pc, #24]	; (800083c <BSP_LED_Init+0x98>)
 8000824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000828:	2200      	movs	r2, #0
 800082a:	4619      	mov	r1, r3
 800082c:	f000 fc6a 	bl	8001104 <HAL_GPIO_WritePin>
}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	080027dc 	.word	0x080027dc
 8000840:	20000000 	.word	0x20000000

08000844 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <BSP_LED_On+0x2c>)
 8000852:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <BSP_LED_On+0x30>)
 800085a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800085e:	2201      	movs	r2, #1
 8000860:	4619      	mov	r1, r3
 8000862:	f000 fc4f 	bl	8001104 <HAL_GPIO_WritePin>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000000 	.word	0x20000000
 8000874:	080027dc 	.word	0x080027dc

08000878 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <BSP_LED_Off+0x2c>)
 8000886:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <BSP_LED_Off+0x30>)
 800088e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	f000 fc35 	bl	8001104 <HAL_GPIO_WritePin>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000000 	.word	0x20000000
 80008a8:	080027dc 	.word	0x080027dc

080008ac <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <BSP_LED_Toggle+0x2c>)
 80008ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4906      	ldr	r1, [pc, #24]	; (80008dc <BSP_LED_Toggle+0x30>)
 80008c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008c6:	4619      	mov	r1, r3
 80008c8:	4610      	mov	r0, r2
 80008ca:	f000 fc34 	bl	8001136 <HAL_GPIO_TogglePin>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000000 	.word	0x20000000
 80008dc:	080027dc 	.word	0x080027dc

080008e0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	4b23      	ldr	r3, [pc, #140]	; (8000984 <BSP_PB_Init+0xa4>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	4a22      	ldr	r2, [pc, #136]	; (8000984 <BSP_PB_Init+0xa4>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000900:	4b20      	ldr	r3, [pc, #128]	; (8000984 <BSP_PB_Init+0xa4>)
 8000902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d112      	bne.n	8000938 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000916:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800091c:	2302      	movs	r3, #2
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000920:	2302      	movs	r3, #2
 8000922:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	4a18      	ldr	r2, [pc, #96]	; (8000988 <BSP_PB_Init+0xa8>)
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092c:	f107 020c 	add.w	r2, r7, #12
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f000 fa22 	bl	8000d7c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d11d      	bne.n	800097a <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800093e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000942:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000948:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800094c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <BSP_PB_Init+0xa8>)
 8000952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000956:	f107 020c 	add.w	r2, r7, #12
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fa0d 	bl	8000d7c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000962:	2328      	movs	r3, #40	; 0x28
 8000964:	b25b      	sxtb	r3, r3
 8000966:	2200      	movs	r2, #0
 8000968:	210f      	movs	r1, #15
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f9cf 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000970:	2328      	movs	r3, #40	; 0x28
 8000972:	b25b      	sxtb	r3, r3
 8000974:	4618      	mov	r0, r3
 8000976:	f000 f9e6 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  }
}
 800097a:	bf00      	nop
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	2000000c 	.word	0x2000000c

0800098c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <BSP_PB_GetState+0x28>)
 800099a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fb95 	bl	80010d4 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000000c 	.word	0x2000000c

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <SystemInit+0x60>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <SystemInit+0x60>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <SystemInit+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <SystemInit+0x64>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <SystemInit+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <SystemInit+0x64>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <SystemInit+0x64>)
 80009e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <SystemInit+0x64>)
 80009f0:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <SystemInit+0x68>)
 80009f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <SystemInit+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <SystemInit+0x64>)
 80009fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <SystemInit+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <SystemInit+0x60>)
 8000a08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a0c:	609a      	str	r2, [r3, #8]
#endif
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	24003010 	.word	0x24003010

08000a24 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000a78:	f000 f84e 	bl	8000b18 <HAL_IncTick>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_Init+0x34>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_Init+0x34>)
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8e:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x34>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x34>)
 8000a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f92b 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f000 fbb2 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f943 	bl	8000d62 <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f90b 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000010 	.word	0x20000010
 8000b10:	20000018 	.word	0x20000018
 8000b14:	20000014 	.word	0x20000014

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000018 	.word	0x20000018
 8000b3c:	2000008c 	.word	0x2000008c

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2000008c 	.word	0x2000008c

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff29 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff3e 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff8e 	bl	8000c4c <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff31 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffa2 	bl	8000cb4 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	e177      	b.n	8001088 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f040 8166 	bne.w	8001082 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d005      	beq.n	8000dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d130      	bne.n	8000e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	f003 0201 	and.w	r2, r3, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d017      	beq.n	8000e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d123      	bne.n	8000ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	69b9      	ldr	r1, [r7, #24]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0203 	and.w	r2, r3, #3
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80c0 	beq.w	8001082 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b66      	ldr	r3, [pc, #408]	; (80010a0 <HAL_GPIO_Init+0x324>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a65      	ldr	r2, [pc, #404]	; (80010a0 <HAL_GPIO_Init+0x324>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b63      	ldr	r3, [pc, #396]	; (80010a0 <HAL_GPIO_Init+0x324>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1e:	4a61      	ldr	r2, [pc, #388]	; (80010a4 <HAL_GPIO_Init+0x328>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a58      	ldr	r2, [pc, #352]	; (80010a8 <HAL_GPIO_Init+0x32c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d037      	beq.n	8000fba <HAL_GPIO_Init+0x23e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a57      	ldr	r2, [pc, #348]	; (80010ac <HAL_GPIO_Init+0x330>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d031      	beq.n	8000fb6 <HAL_GPIO_Init+0x23a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a56      	ldr	r2, [pc, #344]	; (80010b0 <HAL_GPIO_Init+0x334>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d02b      	beq.n	8000fb2 <HAL_GPIO_Init+0x236>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a55      	ldr	r2, [pc, #340]	; (80010b4 <HAL_GPIO_Init+0x338>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d025      	beq.n	8000fae <HAL_GPIO_Init+0x232>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a54      	ldr	r2, [pc, #336]	; (80010b8 <HAL_GPIO_Init+0x33c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d01f      	beq.n	8000faa <HAL_GPIO_Init+0x22e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a53      	ldr	r2, [pc, #332]	; (80010bc <HAL_GPIO_Init+0x340>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d019      	beq.n	8000fa6 <HAL_GPIO_Init+0x22a>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a52      	ldr	r2, [pc, #328]	; (80010c0 <HAL_GPIO_Init+0x344>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0x226>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a51      	ldr	r2, [pc, #324]	; (80010c4 <HAL_GPIO_Init+0x348>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00d      	beq.n	8000f9e <HAL_GPIO_Init+0x222>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a50      	ldr	r2, [pc, #320]	; (80010c8 <HAL_GPIO_Init+0x34c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d007      	beq.n	8000f9a <HAL_GPIO_Init+0x21e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4f      	ldr	r2, [pc, #316]	; (80010cc <HAL_GPIO_Init+0x350>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_Init+0x21a>
 8000f92:	2309      	movs	r3, #9
 8000f94:	e012      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000f96:	230a      	movs	r3, #10
 8000f98:	e010      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	e00e      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	e00c      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	e00a      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <HAL_GPIO_Init+0x328>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fda:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <HAL_GPIO_Init+0x354>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ffe:	4a34      	ldr	r2, [pc, #208]	; (80010d0 <HAL_GPIO_Init+0x354>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001004:	4b32      	ldr	r3, [pc, #200]	; (80010d0 <HAL_GPIO_Init+0x354>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001028:	4a29      	ldr	r2, [pc, #164]	; (80010d0 <HAL_GPIO_Init+0x354>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <HAL_GPIO_Init+0x354>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001052:	4a1f      	ldr	r2, [pc, #124]	; (80010d0 <HAL_GPIO_Init+0x354>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_GPIO_Init+0x354>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_GPIO_Init+0x354>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f ae84 	bls.w	8000d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40021c00 	.word	0x40021c00
 80010c8:	40022000 	.word	0x40022000
 80010cc:	40022400 	.word	0x40022400
 80010d0:	40013c00 	.word	0x40013c00

080010d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691a      	ldr	r2, [r3, #16]
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e001      	b.n	80010f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
 8001110:	4613      	mov	r3, r2
 8001112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001114:	787b      	ldrb	r3, [r7, #1]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001120:	e003      	b.n	800112a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	041a      	lsls	r2, r3, #16
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	619a      	str	r2, [r3, #24]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001136:	b480      	push	{r7}
 8001138:	b085      	sub	sp, #20
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001148:	887a      	ldrh	r2, [r7, #2]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	041a      	lsls	r2, r3, #16
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43d9      	mvns	r1, r3
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	400b      	ands	r3, r1
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	619a      	str	r2, [r3, #24]
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_UART_MspInit+0x9c>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	4a22      	ldr	r2, [pc, #136]	; (8001208 <HAL_UART_MspInit+0x9c>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6313      	str	r3, [r2, #48]	; 0x30
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <HAL_UART_MspInit+0x9c>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_UART_MspInit+0x9c>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <HAL_UART_MspInit+0x9c>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6313      	str	r3, [r2, #48]	; 0x30
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_UART_MspInit+0x9c>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_UART_MspInit+0x9c>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <HAL_UART_MspInit+0x9c>)
 80011b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_UART_MspInit+0x9c>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80011c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80011da:	2307      	movs	r3, #7
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4809      	ldr	r0, [pc, #36]	; (800120c <HAL_UART_MspInit+0xa0>)
 80011e6:	f7ff fdc9 	bl	8000d7c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80011ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80011f0:	2307      	movs	r3, #7
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4804      	ldr	r0, [pc, #16]	; (800120c <HAL_UART_MspInit+0xa0>)
 80011fc:	f7ff fdbe 	bl	8000d7c <HAL_GPIO_Init>
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40020c00 	.word	0x40020c00

08001210 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800124c:	f7ff fc78 	bl	8000b40 <HAL_GetTick>
 8001250:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001252:	e009      	b.n	8001268 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001254:	f7ff fc74 	bl	8000b40 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001262:	d901      	bls.n	8001268 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e01f      	b.n	80012a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001274:	d1ee      	bne.n	8001254 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800127c:	f7ff fc60 	bl	8000b40 <HAL_GetTick>
 8001280:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001282:	e009      	b.n	8001298 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001284:	f7ff fc5c 	bl	8000b40 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001292:	d901      	bls.n	8001298 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e007      	b.n	80012a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012a4:	d1ee      	bne.n	8001284 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	420e0040 	.word	0x420e0040
 80012b8:	40007000 	.word	0x40007000
 80012bc:	420e0044 	.word	0x420e0044

080012c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e267      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d075      	beq.n	80013ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012de:	4b88      	ldr	r3, [pc, #544]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d00c      	beq.n	8001304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ea:	4b85      	ldr	r3, [pc, #532]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d112      	bne.n	800131c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f6:	4b82      	ldr	r3, [pc, #520]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001302:	d10b      	bne.n	800131c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	4b7e      	ldr	r3, [pc, #504]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d05b      	beq.n	80013c8 <HAL_RCC_OscConfig+0x108>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d157      	bne.n	80013c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e242      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d106      	bne.n	8001334 <HAL_RCC_OscConfig+0x74>
 8001326:	4b76      	ldr	r3, [pc, #472]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a75      	ldr	r2, [pc, #468]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e01d      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x98>
 800133e:	4b70      	ldr	r3, [pc, #448]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6f      	ldr	r2, [pc, #444]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b6d      	ldr	r3, [pc, #436]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a6c      	ldr	r2, [pc, #432]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e00b      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001358:	4b69      	ldr	r3, [pc, #420]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a68      	ldr	r2, [pc, #416]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800135e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b66      	ldr	r3, [pc, #408]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a65      	ldr	r2, [pc, #404]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800136a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d013      	beq.n	80013a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fbe2 	bl	8000b40 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fbde 	bl	8000b40 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e207      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b5b      	ldr	r3, [pc, #364]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0xc0>
 800139e:	e014      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fbce 	bl	8000b40 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fbca 	bl	8000b40 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1f3      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	4b51      	ldr	r3, [pc, #324]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0xe8>
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d063      	beq.n	800149e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d6:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d11c      	bne.n	8001428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ee:	4b44      	ldr	r3, [pc, #272]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d116      	bne.n	8001428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	4b41      	ldr	r3, [pc, #260]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x152>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e1c7      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001412:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4937      	ldr	r1, [pc, #220]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	e03a      	b.n	800149e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001430:	4b34      	ldr	r3, [pc, #208]	; (8001504 <HAL_RCC_OscConfig+0x244>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fb83 	bl	8000b40 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fb7f 	bl	8000b40 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e1a8      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4925      	ldr	r1, [pc, #148]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_RCC_OscConfig+0x244>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff fb62 	bl	8000b40 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fb5e 	bl	8000b40 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e187      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d036      	beq.n	8001518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d016      	beq.n	80014e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_RCC_OscConfig+0x248>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff fb42 	bl	8000b40 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff fb3e 	bl	8000b40 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e167      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_RCC_OscConfig+0x240>)
 80014d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x200>
 80014de:	e01b      	b.n	8001518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_OscConfig+0x248>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb2b 	bl	8000b40 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	e00e      	b.n	800150c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fb27 	bl	8000b40 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d907      	bls.n	800150c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e150      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
 8001500:	40023800 	.word	0x40023800
 8001504:	42470000 	.word	0x42470000
 8001508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	4b88      	ldr	r3, [pc, #544]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1ea      	bne.n	80014ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8097 	beq.w	8001654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152a:	4b81      	ldr	r3, [pc, #516]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10f      	bne.n	8001556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b7d      	ldr	r3, [pc, #500]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a7c      	ldr	r2, [pc, #496]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b7a      	ldr	r3, [pc, #488]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b77      	ldr	r3, [pc, #476]	; (8001734 <HAL_RCC_OscConfig+0x474>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d118      	bne.n	8001594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b74      	ldr	r3, [pc, #464]	; (8001734 <HAL_RCC_OscConfig+0x474>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a73      	ldr	r2, [pc, #460]	; (8001734 <HAL_RCC_OscConfig+0x474>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff fae7 	bl	8000b40 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001576:	f7ff fae3 	bl	8000b40 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e10c      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	4b6a      	ldr	r3, [pc, #424]	; (8001734 <HAL_RCC_OscConfig+0x474>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x2ea>
 800159c:	4b64      	ldr	r3, [pc, #400]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a63      	ldr	r2, [pc, #396]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	e01c      	b.n	80015e4 <HAL_RCC_OscConfig+0x324>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x30c>
 80015b2:	4b5f      	ldr	r3, [pc, #380]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a5e      	ldr	r2, [pc, #376]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a5b      	ldr	r2, [pc, #364]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ca:	e00b      	b.n	80015e4 <HAL_RCC_OscConfig+0x324>
 80015cc:	4b58      	ldr	r3, [pc, #352]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	4a57      	ldr	r2, [pc, #348]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	6713      	str	r3, [r2, #112]	; 0x70
 80015d8:	4b55      	ldr	r3, [pc, #340]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a54      	ldr	r2, [pc, #336]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80015de:	f023 0304 	bic.w	r3, r3, #4
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d015      	beq.n	8001618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff faa8 	bl	8000b40 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f2:	e00a      	b.n	800160a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7ff faa4 	bl	8000b40 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e0cb      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160a:	4b49      	ldr	r3, [pc, #292]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0ee      	beq.n	80015f4 <HAL_RCC_OscConfig+0x334>
 8001616:	e014      	b.n	8001642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff fa92 	bl	8000b40 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161e:	e00a      	b.n	8001636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001620:	f7ff fa8e 	bl	8000b40 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e0b5      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001636:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ee      	bne.n	8001620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001648:	4b39      	ldr	r3, [pc, #228]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	4a38      	ldr	r2, [pc, #224]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 800164e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80a1 	beq.w	80017a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165e:	4b34      	ldr	r3, [pc, #208]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b08      	cmp	r3, #8
 8001668:	d05c      	beq.n	8001724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d141      	bne.n	80016f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b31      	ldr	r3, [pc, #196]	; (8001738 <HAL_RCC_OscConfig+0x478>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fa62 	bl	8000b40 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fa5e 	bl	8000b40 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e087      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	019b      	lsls	r3, r3, #6
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	3b01      	subs	r3, #1
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	061b      	lsls	r3, r3, #24
 80016c2:	491b      	ldr	r1, [pc, #108]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x478>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fa37 	bl	8000b40 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff fa33 	bl	8000b40 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e05c      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x416>
 80016f4:	e054      	b.n	80017a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_RCC_OscConfig+0x478>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fa20 	bl	8000b40 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff fa1c 	bl	8000b40 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e045      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_RCC_OscConfig+0x470>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x444>
 8001722:	e03d      	b.n	80017a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d107      	bne.n	800173c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e038      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000
 8001738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x4ec>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d028      	beq.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d121      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d11a      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800176c:	4013      	ands	r3, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001774:	4293      	cmp	r3, r2
 8001776:	d111      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	085b      	lsrs	r3, r3, #1
 8001784:	3b01      	subs	r3, #1
 8001786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d107      	bne.n	800179c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0cc      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d90c      	bls.n	80017ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b65      	ldr	r3, [pc, #404]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b63      	ldr	r3, [pc, #396]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0b8      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d020      	beq.n	800183a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001804:	4b59      	ldr	r3, [pc, #356]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a58      	ldr	r2, [pc, #352]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800180e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800181c:	4b53      	ldr	r3, [pc, #332]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a52      	ldr	r2, [pc, #328]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001828:	4b50      	ldr	r3, [pc, #320]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	494d      	ldr	r1, [pc, #308]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d044      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d119      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e07f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d003      	beq.n	800186e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	2b03      	cmp	r3, #3
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e06f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e067      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188e:	4b37      	ldr	r3, [pc, #220]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f023 0203 	bic.w	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4934      	ldr	r1, [pc, #208]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a0:	f7ff f94e 	bl	8000b40 <HAL_GetTick>
 80018a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	e00a      	b.n	80018be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a8:	f7ff f94a 	bl	8000b40 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e04f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 020c 	and.w	r2, r3, #12
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1eb      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d20c      	bcs.n	80018f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e032      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4916      	ldr	r1, [pc, #88]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	490e      	ldr	r1, [pc, #56]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001936:	f000 f821 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800193a:	4602      	mov	r2, r0
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	490a      	ldr	r1, [pc, #40]	; (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	5ccb      	ldrb	r3, [r1, r3]
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f8ae 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00
 800196c:	40023800 	.word	0x40023800
 8001970:	080027e4 	.word	0x080027e4
 8001974:	20000010 	.word	0x20000010
 8001978:	20000014 	.word	0x20000014

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001980:	b094      	sub	sp, #80	; 0x50
 8001982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
 8001988:	2300      	movs	r3, #0
 800198a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800198c:	2300      	movs	r3, #0
 800198e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001994:	4b79      	ldr	r3, [pc, #484]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d00d      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x40>
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	f200 80e1 	bhi.w	8001b68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x34>
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ae:	e0db      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b73      	ldr	r3, [pc, #460]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80019b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019b4:	e0db      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x208>)
 80019b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ba:	e0d8      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019bc:	4b6f      	ldr	r3, [pc, #444]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c6:	4b6d      	ldr	r3, [pc, #436]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d063      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d2:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	099b      	lsrs	r3, r3, #6
 80019d8:	2200      	movs	r2, #0
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
 80019dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
 80019e6:	2300      	movs	r3, #0
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
 80019ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019ee:	4622      	mov	r2, r4
 80019f0:	462b      	mov	r3, r5
 80019f2:	f04f 0000 	mov.w	r0, #0
 80019f6:	f04f 0100 	mov.w	r1, #0
 80019fa:	0159      	lsls	r1, r3, #5
 80019fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a00:	0150      	lsls	r0, r2, #5
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4621      	mov	r1, r4
 8001a08:	1a51      	subs	r1, r2, r1
 8001a0a:	6139      	str	r1, [r7, #16]
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a20:	4659      	mov	r1, fp
 8001a22:	018b      	lsls	r3, r1, #6
 8001a24:	4651      	mov	r1, sl
 8001a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a2a:	4651      	mov	r1, sl
 8001a2c:	018a      	lsls	r2, r1, #6
 8001a2e:	4651      	mov	r1, sl
 8001a30:	ebb2 0801 	subs.w	r8, r2, r1
 8001a34:	4659      	mov	r1, fp
 8001a36:	eb63 0901 	sbc.w	r9, r3, r1
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a4e:	4690      	mov	r8, r2
 8001a50:	4699      	mov	r9, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	eb18 0303 	adds.w	r3, r8, r3
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	462b      	mov	r3, r5
 8001a5c:	eb49 0303 	adc.w	r3, r9, r3
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a6e:	4629      	mov	r1, r5
 8001a70:	024b      	lsls	r3, r1, #9
 8001a72:	4621      	mov	r1, r4
 8001a74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a78:	4621      	mov	r1, r4
 8001a7a:	024a      	lsls	r2, r1, #9
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a82:	2200      	movs	r2, #0
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a8c:	f7fe fbae 	bl	80001ec <__aeabi_uldivmod>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4613      	mov	r3, r2
 8001a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a98:	e058      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9a:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	099b      	lsrs	r3, r3, #6
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aaa:	623b      	str	r3, [r7, #32]
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ab4:	4642      	mov	r2, r8
 8001ab6:	464b      	mov	r3, r9
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	0159      	lsls	r1, r3, #5
 8001ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac6:	0150      	lsls	r0, r2, #5
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4641      	mov	r1, r8
 8001ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ad2:	4649      	mov	r1, r9
 8001ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aec:	ebb2 040a 	subs.w	r4, r2, sl
 8001af0:	eb63 050b 	sbc.w	r5, r3, fp
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	00eb      	lsls	r3, r5, #3
 8001afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b02:	00e2      	lsls	r2, r4, #3
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	4643      	mov	r3, r8
 8001b0a:	18e3      	adds	r3, r4, r3
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	464b      	mov	r3, r9
 8001b10:	eb45 0303 	adc.w	r3, r5, r3
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b22:	4629      	mov	r1, r5
 8001b24:	028b      	lsls	r3, r1, #10
 8001b26:	4621      	mov	r1, r4
 8001b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	028a      	lsls	r2, r1, #10
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b36:	2200      	movs	r2, #0
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	61fa      	str	r2, [r7, #28]
 8001b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b40:	f7fe fb54 	bl	80001ec <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	0c1b      	lsrs	r3, r3, #16
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	3301      	adds	r3, #1
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b66:	e002      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3750      	adds	r7, #80	; 0x50
 8001b74:	46bd      	mov	sp, r7
 8001b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	00f42400 	.word	0x00f42400
 8001b84:	007a1200 	.word	0x007a1200

08001b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000010 	.word	0x20000010

08001ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ba4:	f7ff fff0 	bl	8001b88 <HAL_RCC_GetHCLKFreq>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	0a9b      	lsrs	r3, r3, #10
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	4903      	ldr	r1, [pc, #12]	; (8001bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb6:	5ccb      	ldrb	r3, [r1, r3]
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	080027f4 	.word	0x080027f4

08001bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bcc:	f7ff ffdc 	bl	8001b88 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0b5b      	lsrs	r3, r3, #13
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4903      	ldr	r1, [pc, #12]	; (8001bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	080027f4 	.word	0x080027f4

08001bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e03f      	b.n	8001c82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff faa8 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2224      	movs	r2, #36	; 0x24
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f993 	bl	8001f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b08a      	sub	sp, #40	; 0x28
 8001c8e:	af02      	add	r7, sp, #8
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4613      	mov	r3, r2
 8001c98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d17c      	bne.n	8001da4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_UART_Transmit+0x2c>
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e075      	b.n	8001da6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_UART_Transmit+0x3e>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e06e      	b.n	8001da6 <HAL_UART_Transmit+0x11c>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2221      	movs	r2, #33	; 0x21
 8001cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cde:	f7fe ff2f 	bl	8000b40 <HAL_GetTick>
 8001ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	88fa      	ldrh	r2, [r7, #6]
 8001ce8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	88fa      	ldrh	r2, [r7, #6]
 8001cee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf8:	d108      	bne.n	8001d0c <HAL_UART_Transmit+0x82>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d104      	bne.n	8001d0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	e003      	b.n	8001d14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d1c:	e02a      	b.n	8001d74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2200      	movs	r2, #0
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 f870 	bl	8001e0e <UART_WaitOnFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e036      	b.n	8001da6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10b      	bne.n	8001d56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	3302      	adds	r3, #2
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	e007      	b.n	8001d66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	3301      	adds	r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1cf      	bne.n	8001d1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2200      	movs	r2, #0
 8001d86:	2140      	movs	r1, #64	; 0x40
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f840 	bl	8001e0e <UART_WaitOnFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e006      	b.n	8001da6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e000      	b.n	8001da6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
  }
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	4613      	mov	r3, r2
 8001dba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b20      	cmp	r3, #32
 8001dc6:	d11d      	bne.n	8001e04 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <HAL_UART_Receive_IT+0x26>
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e016      	b.n	8001e06 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_UART_Receive_IT+0x38>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e00f      	b.n	8001e06 <HAL_UART_Receive_IT+0x58>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 f875 	bl	8001eea <UART_Start_Receive_IT>
 8001e00:	4603      	mov	r3, r0
 8001e02:	e000      	b.n	8001e06 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001e04:	2302      	movs	r3, #2
  }
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b090      	sub	sp, #64	; 0x40
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e1e:	e050      	b.n	8001ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e26:	d04c      	beq.n	8001ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <UART_WaitOnFlagUntilTimeout+0x30>
 8001e2e:	f7fe fe87 	bl	8000b40 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d241      	bcs.n	8001ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	330c      	adds	r3, #12
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e48:	e853 3f00 	ldrex	r3, [r3]
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	330c      	adds	r3, #12
 8001e5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e5e:	637a      	str	r2, [r7, #52]	; 0x34
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e66:	e841 2300 	strex	r3, r2, [r1]
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1e5      	bne.n	8001e3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3314      	adds	r3, #20
 8001e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	e853 3f00 	ldrex	r3, [r3]
 8001e80:	613b      	str	r3, [r7, #16]
   return(result);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	3314      	adds	r3, #20
 8001e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e92:	623a      	str	r2, [r7, #32]
 8001e94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e96:	69f9      	ldr	r1, [r7, #28]
 8001e98:	6a3a      	ldr	r2, [r7, #32]
 8001e9a:	e841 2300 	strex	r3, r2, [r1]
 8001e9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1e5      	bne.n	8001e72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e00f      	b.n	8001ee2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d09f      	beq.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3740      	adds	r7, #64	; 0x40
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b085      	sub	sp, #20
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	88fa      	ldrh	r2, [r7, #6]
 8001f02:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	88fa      	ldrh	r2, [r7, #6]
 8001f08:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2222      	movs	r2, #34	; 0x22
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f2e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0220 	orr.w	r2, r2, #32
 8001f4e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f64:	b0c0      	sub	sp, #256	; 0x100
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7c:	68d9      	ldr	r1, [r3, #12]
 8001f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	ea40 0301 	orr.w	r3, r0, r1
 8001f88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001fb8:	f021 010c 	bic.w	r1, r1, #12
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fda:	6999      	ldr	r1, [r3, #24]
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	ea40 0301 	orr.w	r3, r0, r1
 8001fe6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b8f      	ldr	r3, [pc, #572]	; (800222c <UART_SetConfig+0x2cc>)
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d005      	beq.n	8002000 <UART_SetConfig+0xa0>
 8001ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	4b8d      	ldr	r3, [pc, #564]	; (8002230 <UART_SetConfig+0x2d0>)
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d104      	bne.n	800200a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002000:	f7ff fde2 	bl	8001bc8 <HAL_RCC_GetPCLK2Freq>
 8002004:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002008:	e003      	b.n	8002012 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800200a:	f7ff fdc9 	bl	8001ba0 <HAL_RCC_GetPCLK1Freq>
 800200e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800201c:	f040 810c 	bne.w	8002238 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002024:	2200      	movs	r2, #0
 8002026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800202a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800202e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002032:	4622      	mov	r2, r4
 8002034:	462b      	mov	r3, r5
 8002036:	1891      	adds	r1, r2, r2
 8002038:	65b9      	str	r1, [r7, #88]	; 0x58
 800203a:	415b      	adcs	r3, r3
 800203c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800203e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002042:	4621      	mov	r1, r4
 8002044:	eb12 0801 	adds.w	r8, r2, r1
 8002048:	4629      	mov	r1, r5
 800204a:	eb43 0901 	adc.w	r9, r3, r1
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800205a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800205e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002062:	4690      	mov	r8, r2
 8002064:	4699      	mov	r9, r3
 8002066:	4623      	mov	r3, r4
 8002068:	eb18 0303 	adds.w	r3, r8, r3
 800206c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002070:	462b      	mov	r3, r5
 8002072:	eb49 0303 	adc.w	r3, r9, r3
 8002076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800207a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002086:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800208a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800208e:	460b      	mov	r3, r1
 8002090:	18db      	adds	r3, r3, r3
 8002092:	653b      	str	r3, [r7, #80]	; 0x50
 8002094:	4613      	mov	r3, r2
 8002096:	eb42 0303 	adc.w	r3, r2, r3
 800209a:	657b      	str	r3, [r7, #84]	; 0x54
 800209c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80020a4:	f7fe f8a2 	bl	80001ec <__aeabi_uldivmod>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4b61      	ldr	r3, [pc, #388]	; (8002234 <UART_SetConfig+0x2d4>)
 80020ae:	fba3 2302 	umull	r2, r3, r3, r2
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	011c      	lsls	r4, r3, #4
 80020b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020ba:	2200      	movs	r2, #0
 80020bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80020c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80020c8:	4642      	mov	r2, r8
 80020ca:	464b      	mov	r3, r9
 80020cc:	1891      	adds	r1, r2, r2
 80020ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80020d0:	415b      	adcs	r3, r3
 80020d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020d8:	4641      	mov	r1, r8
 80020da:	eb12 0a01 	adds.w	sl, r2, r1
 80020de:	4649      	mov	r1, r9
 80020e0:	eb43 0b01 	adc.w	fp, r3, r1
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020f8:	4692      	mov	sl, r2
 80020fa:	469b      	mov	fp, r3
 80020fc:	4643      	mov	r3, r8
 80020fe:	eb1a 0303 	adds.w	r3, sl, r3
 8002102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002106:	464b      	mov	r3, r9
 8002108:	eb4b 0303 	adc.w	r3, fp, r3
 800210c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800211c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002120:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002124:	460b      	mov	r3, r1
 8002126:	18db      	adds	r3, r3, r3
 8002128:	643b      	str	r3, [r7, #64]	; 0x40
 800212a:	4613      	mov	r3, r2
 800212c:	eb42 0303 	adc.w	r3, r2, r3
 8002130:	647b      	str	r3, [r7, #68]	; 0x44
 8002132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800213a:	f7fe f857 	bl	80001ec <__aeabi_uldivmod>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4611      	mov	r1, r2
 8002144:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <UART_SetConfig+0x2d4>)
 8002146:	fba3 2301 	umull	r2, r3, r3, r1
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2264      	movs	r2, #100	; 0x64
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	1acb      	subs	r3, r1, r3
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800215a:	4b36      	ldr	r3, [pc, #216]	; (8002234 <UART_SetConfig+0x2d4>)
 800215c:	fba3 2302 	umull	r2, r3, r3, r2
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002168:	441c      	add	r4, r3
 800216a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800216e:	2200      	movs	r2, #0
 8002170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002174:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002178:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800217c:	4642      	mov	r2, r8
 800217e:	464b      	mov	r3, r9
 8002180:	1891      	adds	r1, r2, r2
 8002182:	63b9      	str	r1, [r7, #56]	; 0x38
 8002184:	415b      	adcs	r3, r3
 8002186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800218c:	4641      	mov	r1, r8
 800218e:	1851      	adds	r1, r2, r1
 8002190:	6339      	str	r1, [r7, #48]	; 0x30
 8002192:	4649      	mov	r1, r9
 8002194:	414b      	adcs	r3, r1
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80021a4:	4659      	mov	r1, fp
 80021a6:	00cb      	lsls	r3, r1, #3
 80021a8:	4651      	mov	r1, sl
 80021aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ae:	4651      	mov	r1, sl
 80021b0:	00ca      	lsls	r2, r1, #3
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	4642      	mov	r2, r8
 80021ba:	189b      	adds	r3, r3, r2
 80021bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021c0:	464b      	mov	r3, r9
 80021c2:	460a      	mov	r2, r1
 80021c4:	eb42 0303 	adc.w	r3, r2, r3
 80021c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021e0:	460b      	mov	r3, r1
 80021e2:	18db      	adds	r3, r3, r3
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021e6:	4613      	mov	r3, r2
 80021e8:	eb42 0303 	adc.w	r3, r2, r3
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80021f6:	f7fd fff9 	bl	80001ec <__aeabi_uldivmod>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <UART_SetConfig+0x2d4>)
 8002200:	fba3 1302 	umull	r1, r3, r3, r2
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	2164      	movs	r1, #100	; 0x64
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	3332      	adds	r3, #50	; 0x32
 8002212:	4a08      	ldr	r2, [pc, #32]	; (8002234 <UART_SetConfig+0x2d4>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	f003 0207 	and.w	r2, r3, #7
 800221e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4422      	add	r2, r4
 8002226:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002228:	e105      	b.n	8002436 <UART_SetConfig+0x4d6>
 800222a:	bf00      	nop
 800222c:	40011000 	.word	0x40011000
 8002230:	40011400 	.word	0x40011400
 8002234:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800223c:	2200      	movs	r2, #0
 800223e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002242:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800224a:	4642      	mov	r2, r8
 800224c:	464b      	mov	r3, r9
 800224e:	1891      	adds	r1, r2, r2
 8002250:	6239      	str	r1, [r7, #32]
 8002252:	415b      	adcs	r3, r3
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800225a:	4641      	mov	r1, r8
 800225c:	1854      	adds	r4, r2, r1
 800225e:	4649      	mov	r1, r9
 8002260:	eb43 0501 	adc.w	r5, r3, r1
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	00eb      	lsls	r3, r5, #3
 800226e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002272:	00e2      	lsls	r2, r4, #3
 8002274:	4614      	mov	r4, r2
 8002276:	461d      	mov	r5, r3
 8002278:	4643      	mov	r3, r8
 800227a:	18e3      	adds	r3, r4, r3
 800227c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002280:	464b      	mov	r3, r9
 8002282:	eb45 0303 	adc.w	r3, r5, r3
 8002286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800228a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002296:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022a6:	4629      	mov	r1, r5
 80022a8:	008b      	lsls	r3, r1, #2
 80022aa:	4621      	mov	r1, r4
 80022ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022b0:	4621      	mov	r1, r4
 80022b2:	008a      	lsls	r2, r1, #2
 80022b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022b8:	f7fd ff98 	bl	80001ec <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4b60      	ldr	r3, [pc, #384]	; (8002444 <UART_SetConfig+0x4e4>)
 80022c2:	fba3 2302 	umull	r2, r3, r3, r2
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	011c      	lsls	r4, r3, #4
 80022ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ce:	2200      	movs	r2, #0
 80022d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022dc:	4642      	mov	r2, r8
 80022de:	464b      	mov	r3, r9
 80022e0:	1891      	adds	r1, r2, r2
 80022e2:	61b9      	str	r1, [r7, #24]
 80022e4:	415b      	adcs	r3, r3
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022ec:	4641      	mov	r1, r8
 80022ee:	1851      	adds	r1, r2, r1
 80022f0:	6139      	str	r1, [r7, #16]
 80022f2:	4649      	mov	r1, r9
 80022f4:	414b      	adcs	r3, r1
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002304:	4659      	mov	r1, fp
 8002306:	00cb      	lsls	r3, r1, #3
 8002308:	4651      	mov	r1, sl
 800230a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800230e:	4651      	mov	r1, sl
 8002310:	00ca      	lsls	r2, r1, #3
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	4603      	mov	r3, r0
 8002318:	4642      	mov	r2, r8
 800231a:	189b      	adds	r3, r3, r2
 800231c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002320:	464b      	mov	r3, r9
 8002322:	460a      	mov	r2, r1
 8002324:	eb42 0303 	adc.w	r3, r2, r3
 8002328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	67bb      	str	r3, [r7, #120]	; 0x78
 8002336:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002344:	4649      	mov	r1, r9
 8002346:	008b      	lsls	r3, r1, #2
 8002348:	4641      	mov	r1, r8
 800234a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800234e:	4641      	mov	r1, r8
 8002350:	008a      	lsls	r2, r1, #2
 8002352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002356:	f7fd ff49 	bl	80001ec <__aeabi_uldivmod>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4b39      	ldr	r3, [pc, #228]	; (8002444 <UART_SetConfig+0x4e4>)
 8002360:	fba3 1302 	umull	r1, r3, r3, r2
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	2164      	movs	r1, #100	; 0x64
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	3332      	adds	r3, #50	; 0x32
 8002372:	4a34      	ldr	r2, [pc, #208]	; (8002444 <UART_SetConfig+0x4e4>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237e:	441c      	add	r4, r3
 8002380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002384:	2200      	movs	r2, #0
 8002386:	673b      	str	r3, [r7, #112]	; 0x70
 8002388:	677a      	str	r2, [r7, #116]	; 0x74
 800238a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800238e:	4642      	mov	r2, r8
 8002390:	464b      	mov	r3, r9
 8002392:	1891      	adds	r1, r2, r2
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	415b      	adcs	r3, r3
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800239e:	4641      	mov	r1, r8
 80023a0:	1851      	adds	r1, r2, r1
 80023a2:	6039      	str	r1, [r7, #0]
 80023a4:	4649      	mov	r1, r9
 80023a6:	414b      	adcs	r3, r1
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023b6:	4659      	mov	r1, fp
 80023b8:	00cb      	lsls	r3, r1, #3
 80023ba:	4651      	mov	r1, sl
 80023bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023c0:	4651      	mov	r1, sl
 80023c2:	00ca      	lsls	r2, r1, #3
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	4603      	mov	r3, r0
 80023ca:	4642      	mov	r2, r8
 80023cc:	189b      	adds	r3, r3, r2
 80023ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80023d0:	464b      	mov	r3, r9
 80023d2:	460a      	mov	r2, r1
 80023d4:	eb42 0303 	adc.w	r3, r2, r3
 80023d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	663b      	str	r3, [r7, #96]	; 0x60
 80023e4:	667a      	str	r2, [r7, #100]	; 0x64
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80023f2:	4649      	mov	r1, r9
 80023f4:	008b      	lsls	r3, r1, #2
 80023f6:	4641      	mov	r1, r8
 80023f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023fc:	4641      	mov	r1, r8
 80023fe:	008a      	lsls	r2, r1, #2
 8002400:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002404:	f7fd fef2 	bl	80001ec <__aeabi_uldivmod>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <UART_SetConfig+0x4e4>)
 800240e:	fba3 1302 	umull	r1, r3, r3, r2
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2164      	movs	r1, #100	; 0x64
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	3332      	adds	r3, #50	; 0x32
 8002420:	4a08      	ldr	r2, [pc, #32]	; (8002444 <UART_SetConfig+0x4e4>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	f003 020f 	and.w	r2, r3, #15
 800242c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4422      	add	r2, r4
 8002434:	609a      	str	r2, [r3, #8]
}
 8002436:	bf00      	nop
 8002438:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800243c:	46bd      	mov	sp, r7
 800243e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002442:	bf00      	nop
 8002444:	51eb851f 	.word	0x51eb851f

08002448 <SensorTemp_Init>:
#include "SensorTemp.h"
#include <stdlib.h>
#include "API_uart.h"


void SensorTemp_Init(){
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	uartInit();
 800244c:	f7fe f8f8 	bl	8000640 <uartInit>
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <SensorTemp_Read>:


int16_t SensorTemp_Read(){
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
	uint8_t msg[10];
	uint8_t Temp = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
	uartReceiveStringSize((uint8_t *) msg, 12);
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	210c      	movs	r1, #12
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe f93e 	bl	80006e4 <uartReceiveStringSize>
	Temp = (uint8_t) msg[0];
 8002468:	793b      	ldrb	r3, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]
	uartSendString((uint8_t *) msg);
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f912 	bl	8000698 <uartSendString>
	return Temp;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	b21b      	sxth	r3, r3
//	return rand() % 61 - 10;
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	uint16_t AD_RES = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	83bb      	strh	r3, [r7, #28]
	HAL_Init();
 800248a:	f7fe faf9 	bl	8000a80 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 800248e:	f000 f8e3 	bl	8002658 <SystemClock_Config>
	//HAL_ADCEx_Calibration_Start(&hadc1);


	/* Initialize BSP Led for LED */
	delay_t Timer_Alarma;
	delayInit(&Timer_Alarma, Delay_Alarma);
 8002492:	f107 030c 	add.w	r3, r7, #12
 8002496:	21c8      	movs	r1, #200	; 0xc8
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe f935 	bl	8000708 <delayInit>
	
	delay_t Timer_Temp;
	delayInit(&Timer_Temp, Muestreo_Temp);
 800249e:	463b      	mov	r3, r7
 80024a0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe f92f 	bl	8000708 <delayInit>
	

	/* Inicializo todos los LEDS en OFF*/
	BSP_LED_Init(LED1);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7fe f97a 	bl	80007a4 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 80024b0:	2001      	movs	r0, #1
 80024b2:	f7fe f977 	bl	80007a4 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 80024b6:	2002      	movs	r0, #2
 80024b8:	f7fe f974 	bl	80007a4 <BSP_LED_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80024bc:	2100      	movs	r1, #0
 80024be:	2000      	movs	r0, #0
 80024c0:	f7fe fa0e 	bl	80008e0 <BSP_PB_Init>


	BSP_LED_Off(LED1);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7fe f9d7 	bl	8000878 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7fe f9d4 	bl	8000878 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80024d0:	2002      	movs	r0, #2
 80024d2:	f7fe f9d1 	bl	8000878 <BSP_LED_Off>

	debounceFSM_init();
 80024d6:	f7fe f80b 	bl	80004f0 <debounceFSM_init>
	SensorTemp_Init();
 80024da:	f7ff ffb5 	bl	8002448 <SensorTemp_Init>


	int16_t Temp = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	837b      	strh	r3, [r7, #26]
	uint8_t Estado = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	77fb      	strb	r3, [r7, #31]

	/* Infinite loop */
	while (1)
	{

		debounceFSM_update();
 80024e6:	f7fe f81d 	bl	8000524 <debounceFSM_update>
		if (readKey()) {
 80024ea:	f7fe f897 	bl	800061c <readKey>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <main+0x7a>
			Estado = Estado_Critico;
 80024f4:	2304      	movs	r3, #4
 80024f6:	77fb      	strb	r3, [r7, #31]
 80024f8:	e011      	b.n	800251e <main+0x9e>
		}else{
			if (delayReadState(&Timer_Temp)) {
 80024fa:	463b      	mov	r3, r7
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe f921 	bl	8000744 <delayReadState>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <main+0x9e>
				Temp = SensorTemp_Read();
 8002508:	f7ff ffa4 	bl	8002454 <SensorTemp_Read>
 800250c:	4603      	mov	r3, r0
 800250e:	837b      	strh	r3, [r7, #26]
				Estado = Definir_Estado(Temp);
 8002510:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f827 	bl	8002568 <Definir_Estado>
 800251a:	4603      	mov	r3, r0
 800251c:	77fb      	strb	r3, [r7, #31]
			}
		}
		switch (Estado) {
 800251e:	7ffb      	ldrb	r3, [r7, #31]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d81f      	bhi.n	8002564 <main+0xe4>
 8002524:	a201      	add	r2, pc, #4	; (adr r2, 800252c <main+0xac>)
 8002526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252a:	bf00      	nop
 800252c:	0800255f 	.word	0x0800255f
 8002530:	08002559 	.word	0x08002559
 8002534:	08002553 	.word	0x08002553
 8002538:	0800254d 	.word	0x0800254d
 800253c:	08002541 	.word	0x08002541
			case Estado_Critico:
				Activar_Estado_Critico(&Timer_Alarma);
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f83b 	bl	80025c0 <Activar_Estado_Critico>
				break;
 800254a:	e00c      	b.n	8002566 <main+0xe6>
			case Estado_Alto:
				Activar_Estado_Alto();
 800254c:	f000 f84f 	bl	80025ee <Activar_Estado_Alto>
				break;
 8002550:	e009      	b.n	8002566 <main+0xe6>
			case Estado_Medio:
				Activar_Estado_Medio();
 8002552:	f000 f859 	bl	8002608 <Activar_Estado_Medio>
				break;
 8002556:	e006      	b.n	8002566 <main+0xe6>
			case Estado_Bajo:
				Activar_Estado_Bajo();
 8002558:	f000 f863 	bl	8002622 <Activar_Estado_Bajo>
				break;
 800255c:	e003      	b.n	8002566 <main+0xe6>
			case Estado_Bajo_Cero:
				Activar_Estado_Bajo_Cero();
 800255e:	f000 f86d 	bl	800263c <Activar_Estado_Bajo_Cero>
				break;
 8002562:	e000      	b.n	8002566 <main+0xe6>
			default:
				break;
 8002564:	bf00      	nop
		debounceFSM_update();
 8002566:	e7be      	b.n	80024e6 <main+0x66>

08002568 <Definir_Estado>:
 * @retval None
 */



uint8_t Definir_Estado(int16_t Temp){
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	80fb      	strh	r3, [r7, #6]
	uint8_t Estado = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
	if (Temp>=Min_Temp_Critica) {
 8002576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800257a:	2b27      	cmp	r3, #39	; 0x27
 800257c:	dd02      	ble.n	8002584 <Definir_Estado+0x1c>
		Estado = Estado_Critico;
 800257e:	2304      	movs	r3, #4
 8002580:	73fb      	strb	r3, [r7, #15]
 8002582:	e016      	b.n	80025b2 <Definir_Estado+0x4a>
	} else if (Temp>=Min_Temp_Alta) {
 8002584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002588:	2b1d      	cmp	r3, #29
 800258a:	dd02      	ble.n	8002592 <Definir_Estado+0x2a>
		Estado = Estado_Alto;
 800258c:	2303      	movs	r3, #3
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e00f      	b.n	80025b2 <Definir_Estado+0x4a>
	} else if (Temp>=Min_Temp_Media) {
 8002592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002596:	2b0e      	cmp	r3, #14
 8002598:	dd02      	ble.n	80025a0 <Definir_Estado+0x38>
		Estado = Estado_Medio;
 800259a:	2302      	movs	r3, #2
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e008      	b.n	80025b2 <Definir_Estado+0x4a>
	} else if (Temp>=Min_Temp_Baja) {
 80025a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db02      	blt.n	80025ae <Definir_Estado+0x46>
		Estado = Estado_Bajo;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	e001      	b.n	80025b2 <Definir_Estado+0x4a>
	} else {
		Estado = Estado_Bajo_Cero;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
	}

	return Estado;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <Activar_Estado_Critico>:


void Activar_Estado_Critico (delay_t * delay){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	if (delayReadState(delay)) {
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7fe f8bb 	bl	8000744 <delayReadState>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <Activar_Estado_Critico+0x26>
		BSP_LED_Toggle(LED1);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7fe f969 	bl	80008ac <BSP_LED_Toggle>
		BSP_LED_Toggle(LED2);
 80025da:	2001      	movs	r0, #1
 80025dc:	f7fe f966 	bl	80008ac <BSP_LED_Toggle>
		BSP_LED_Toggle(LED3);
 80025e0:	2002      	movs	r0, #2
 80025e2:	f7fe f963 	bl	80008ac <BSP_LED_Toggle>
//		Buzzer_toggle();
	}

}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <Activar_Estado_Alto>:
void Activar_Estado_Alto(void){
 80025ee:	b580      	push	{r7, lr}
 80025f0:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7fe f926 	bl	8000844 <BSP_LED_On>
	BSP_LED_On(LED2);
 80025f8:	2001      	movs	r0, #1
 80025fa:	f7fe f923 	bl	8000844 <BSP_LED_On>
	BSP_LED_On(LED3);
 80025fe:	2002      	movs	r0, #2
 8002600:	f7fe f920 	bl	8000844 <BSP_LED_On>
//	Buzzer_write(GPIO_PIN_RESET);
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}

08002608 <Activar_Estado_Medio>:
void Activar_Estado_Medio(void){
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe f919 	bl	8000844 <BSP_LED_On>
	BSP_LED_On(LED2);
 8002612:	2001      	movs	r0, #1
 8002614:	f7fe f916 	bl	8000844 <BSP_LED_On>
	BSP_LED_Off(LED3);
 8002618:	2002      	movs	r0, #2
 800261a:	f7fe f92d 	bl	8000878 <BSP_LED_Off>
//	Buzzer_write(GPIO_PIN_RESET);
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}

08002622 <Activar_Estado_Bajo>:
void Activar_Estado_Bajo(void){
 8002622:	b580      	push	{r7, lr}
 8002624:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 8002626:	2000      	movs	r0, #0
 8002628:	f7fe f90c 	bl	8000844 <BSP_LED_On>
	BSP_LED_Off(LED2);
 800262c:	2001      	movs	r0, #1
 800262e:	f7fe f923 	bl	8000878 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 8002632:	2002      	movs	r0, #2
 8002634:	f7fe f920 	bl	8000878 <BSP_LED_Off>
//	Buzzer_write(GPIO_PIN_RESET);
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <Activar_Estado_Bajo_Cero>:
void Activar_Estado_Bajo_Cero(void){
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 8002640:	2000      	movs	r0, #0
 8002642:	f7fe f919 	bl	8000878 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 8002646:	2001      	movs	r0, #1
 8002648:	f7fe f916 	bl	8000878 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 800264c:	2002      	movs	r0, #2
 800264e:	f7fe f913 	bl	8000878 <BSP_LED_Off>
//	Buzzer_write(GPIO_PIN_SET);
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <SystemClock_Config>:




static void SystemClock_Config(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b094      	sub	sp, #80	; 0x50
 800265c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <SystemClock_Config+0xbc>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a2b      	ldr	r2, [pc, #172]	; (8002714 <SystemClock_Config+0xbc>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <SystemClock_Config+0xbc>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	4b26      	ldr	r3, [pc, #152]	; (8002718 <SystemClock_Config+0xc0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a25      	ldr	r2, [pc, #148]	; (8002718 <SystemClock_Config+0xc0>)
 8002684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b23      	ldr	r3, [pc, #140]	; (8002718 <SystemClock_Config+0xc0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002692:	607b      	str	r3, [r7, #4]
 8002694:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002696:	2301      	movs	r3, #1
 8002698:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800269a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800269e:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a0:	2302      	movs	r3, #2
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 80026aa:	2308      	movs	r3, #8
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 80026ae:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026b4:	2302      	movs	r3, #2
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80026b8:	2307      	movs	r3, #7
 80026ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe fdfd 	bl	80012c0 <HAL_RCC_OscConfig>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 80026cc:	f000 f826 	bl	800271c <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80026d0:	f7fe fda6 	bl	8001220 <HAL_PWREx_EnableOverDrive>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 80026da:	f000 f81f 	bl	800271c <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80026de:	230f      	movs	r3, #15
 80026e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026e2:	2302      	movs	r3, #2
 80026e4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026e6:	2300      	movs	r3, #0
 80026e8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026fa:	2105      	movs	r1, #5
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff f857 	bl	80017b0 <HAL_RCC_ClockConfig>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8002708:	f000 f808 	bl	800271c <Error_Handler>
	}
}
 800270c:	bf00      	nop
 800270e:	3750      	adds	r7, #80	; 0x50
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40023800 	.word	0x40023800
 8002718:	40007000 	.word	0x40007000

0800271c <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8002720:	2001      	movs	r0, #1
 8002722:	f7fe f88f 	bl	8000844 <BSP_LED_On>
	while (1)
 8002726:	e7fe      	b.n	8002726 <Error_Handler+0xa>

08002728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002760 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800272c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800272e:	e003      	b.n	8002738 <LoopCopyDataInit>

08002730 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002732:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002734:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002736:	3104      	adds	r1, #4

08002738 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002738:	480b      	ldr	r0, [pc, #44]	; (8002768 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800273a:	4b0c      	ldr	r3, [pc, #48]	; (800276c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800273c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800273e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002740:	d3f6      	bcc.n	8002730 <CopyDataInit>
  ldr  r2, =_sbss
 8002742:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002744:	e002      	b.n	800274c <LoopFillZerobss>

08002746 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002746:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002748:	f842 3b04 	str.w	r3, [r2], #4

0800274c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800274e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002750:	d3f9      	bcc.n	8002746 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002752:	f7fe f931 	bl	80009b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002756:	f000 f811 	bl	800277c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800275a:	f7ff fe91 	bl	8002480 <main>
  bx  lr    
 800275e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002760:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002764:	0800280c 	.word	0x0800280c
  ldr  r0, =_sdata
 8002768:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800276c:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8002770:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8002774:	20000090 	.word	0x20000090

08002778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002778:	e7fe      	b.n	8002778 <ADC_IRQHandler>
	...

0800277c <__libc_init_array>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	4d0d      	ldr	r5, [pc, #52]	; (80027b4 <__libc_init_array+0x38>)
 8002780:	4c0d      	ldr	r4, [pc, #52]	; (80027b8 <__libc_init_array+0x3c>)
 8002782:	1b64      	subs	r4, r4, r5
 8002784:	10a4      	asrs	r4, r4, #2
 8002786:	2600      	movs	r6, #0
 8002788:	42a6      	cmp	r6, r4
 800278a:	d109      	bne.n	80027a0 <__libc_init_array+0x24>
 800278c:	4d0b      	ldr	r5, [pc, #44]	; (80027bc <__libc_init_array+0x40>)
 800278e:	4c0c      	ldr	r4, [pc, #48]	; (80027c0 <__libc_init_array+0x44>)
 8002790:	f000 f818 	bl	80027c4 <_init>
 8002794:	1b64      	subs	r4, r4, r5
 8002796:	10a4      	asrs	r4, r4, #2
 8002798:	2600      	movs	r6, #0
 800279a:	42a6      	cmp	r6, r4
 800279c:	d105      	bne.n	80027aa <__libc_init_array+0x2e>
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a4:	4798      	blx	r3
 80027a6:	3601      	adds	r6, #1
 80027a8:	e7ee      	b.n	8002788 <__libc_init_array+0xc>
 80027aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ae:	4798      	blx	r3
 80027b0:	3601      	adds	r6, #1
 80027b2:	e7f2      	b.n	800279a <__libc_init_array+0x1e>
 80027b4:	08002804 	.word	0x08002804
 80027b8:	08002804 	.word	0x08002804
 80027bc:	08002804 	.word	0x08002804
 80027c0:	08002808 	.word	0x08002808

080027c4 <_init>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	bf00      	nop
 80027c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ca:	bc08      	pop	{r3}
 80027cc:	469e      	mov	lr, r3
 80027ce:	4770      	bx	lr

080027d0 <_fini>:
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	bf00      	nop
 80027d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d6:	bc08      	pop	{r3}
 80027d8:	469e      	mov	lr, r3
 80027da:	4770      	bx	lr
